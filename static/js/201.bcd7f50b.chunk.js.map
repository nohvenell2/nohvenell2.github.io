{"version":3,"file":"static/js/201.bcd7f50b.chunk.js","mappings":"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","sources":["components/InputRealNumber.js","pages/Genshin.js","pages/func_Genshin.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Input } from 'antd';\r\nconst formatNumber = (value) => new Intl.NumberFormat().format(value);\r\nconst InputRealNumber = (props) => {\r\n  const { value, onChange } = props;\r\n  const handleChange = (e) => {\r\n    const { value: inputValue } = e.target;\r\n    const reg = /^-?\\d*(\\.\\d*)?$/;\r\n    if (reg.test(inputValue) || inputValue === '' || inputValue === '-') {\r\n      onChange(inputValue);\r\n    }\r\n  };\r\n\r\n  // '.' at the end or only '-' in the input box.\r\n  const handleBlur = () => {\r\n    let valueTemp = value;\r\n    if (!value){return}\r\n    if (value.charAt(value.length - 1) === '.' || value === '-') {\r\n      valueTemp = value.slice(0, -1);\r\n    }\r\n    onChange(valueTemp.replace(/0*(\\d+)/, '$1'));\r\n  };\r\n  const title = value ? (\r\n    <span className=\"numeric-input-title\">{value !== '-' ? formatNumber(Number(value)) : '-'}</span>\r\n  ) : (\r\n    'Input a number'\r\n  );\r\n  return (\r\n    <Input\r\n    {...props}\r\n    style = {{ width : 200, fontSize:\"15px\" }}\r\n    onChange={handleChange}\r\n    onBlur={handleBlur}\r\n    placeholder=\"Input a number\"\r\n    maxLength={8}\r\n    />\r\n  );\r\n};\r\n\r\nexport default InputRealNumber;","import React,{useState} from \"react\"\r\nimport {Form} from 'antd';\r\nimport InputRealNumber from \"../components/InputRealNumber\";\r\nimport calculateDamage from \"./func_Genshin\";\r\nconst Genshin=()=>{\r\n    const [BA,setBA]=useState(100);\r\n    const [AP,setAP]=useState(100);\r\n    const [FA,setFA]=useState(100);\r\n    const [DB,setDB]=useState(0);\r\n    const [CR,setCR]=useState(0);\r\n    const [CD,setCD]=useState(100);\r\n    const [ER,setER]=useState(0);\r\n    const [RM,setRM]=useState(100);\r\n    const [EM,setEM]=useState(0);\r\n    const resultDamage=calculateDamage([BA,AP,FA,DB,CR,CD,ER,RM,EM]);\r\n\r\n    return (\r\n        <div style={{paddingLeft:'80px'}}>\r\n            <h1>Genshin Impact Damage Calculator</h1>\r\n            <Form\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 16 }}\r\n                layout=\"horizontal\"\r\n                style={{ maxWidth: 600 }}>\r\n            <Form.Item label=\"Base Attack :\">\r\n                <InputRealNumber value={BA} onChange={setBA}/>\r\n            </Form.Item>\r\n            <Form.Item label=\"Attack Percentage:\">\r\n                <InputRealNumber value={AP} onChange={setAP} suffix={AP? '%':<span/>}/>\r\n            </Form.Item>\r\n            <Form.Item label=\"Flat Attack:\">\r\n                <InputRealNumber value={FA} onChange={setFA} />\r\n            </Form.Item>\r\n            <Form.Item label=\"Damage Bonus:\">\r\n                <InputRealNumber value={DB} onChange={setDB} suffix={DB? '%':<span/>}/>\r\n            </Form.Item>\r\n            <Form.Item label=\"Crit Rate:\">\r\n                <InputRealNumber value={CR} onChange={setCR} suffix={CR? '%':<span/>}/>\r\n            </Form.Item>\r\n            <Form.Item label=\"Crit Damage:\">\r\n                <InputRealNumber value={CD} onChange={setCD} suffix={CD? '%':<span/>}/>\r\n            </Form.Item>\r\n            <Form.Item label=\"Enemy Resistance:\">\r\n                <InputRealNumber value={ER} onChange={setER} suffix={ER? '%':<span/>}/>\r\n            </Form.Item>\r\n            <Form.Item label=\"Reaction Multiplier:\">\r\n                <InputRealNumber value={RM} onChange={setRM} suffix={RM? '%':<span/>}/>\r\n            </Form.Item>\r\n            <Form.Item label=\"Elemental Mastery:\">\r\n                <InputRealNumber value={EM} onChange={setEM} />\r\n            </Form.Item>\r\n            </Form>\r\n            <h2>Calculated Damage: {resultDamage.toFixed(2)}</h2>       \r\n        </div>\r\n    )\r\n}\r\nexport default Genshin;","function calculateDamage(DamageSource) {\r\n    // Get values from the form\r\n    const baseAttack = DamageSource[0];\r\n    const attackPercentage = DamageSource[1] / 100;\r\n    const flatAttack = DamageSource[2];\r\n    const damageBonus = DamageSource[3] / 100;\r\n    const critRate = DamageSource[4] / 100;\r\n    const critDamage = DamageSource[5] / 100;\r\n    const enemyResistance = DamageSource[6] / 100;\r\n    const reactionMultiplier = DamageSource[7];\r\n    const elementalMastery = DamageSource[8];\r\n\r\n    // Calculate attack power\r\n    const attackPower = baseAttack * (1 + attackPercentage) + flatAttack;\r\n\r\n    // Calculate crit multiplier\r\n    const critMultiplier = 1 + critRate * critDamage;\r\n\r\n    // Calculate resistance multiplier\r\n    let resistanceMultiplier;\r\n    if (enemyResistance >= 0) {\r\n        resistanceMultiplier = 1 - enemyResistance;\r\n    } else {\r\n        resistanceMultiplier = 1 - (enemyResistance / 2);\r\n    }\r\n\r\n    // Calculate elemental mastery multiplier\r\n    const elementalMasteryBonus = (16 * elementalMastery) / (2000 + elementalMastery);\r\n\r\n    // Calculate final damage\r\n    const finalDamage = attackPower * (1 + damageBonus) * critMultiplier * resistanceMultiplier * reactionMultiplier * (1 + elementalMasteryBonus);\r\n    // Display result\r\n    return finalDamage;\r\n}\r\nexport default calculateDamage;"],"names":["formatNumber","value","Intl","NumberFormat","format","props","onChange","Number","_jsx","Input","style","width","fontSize","e","inputValue","target","test","onBlur","handleBlur","valueTemp","charAt","length","slice","replace","placeholder","maxLength","Genshin","BA","setBA","useState","AP","setAP","FA","setFA","DB","setDB","CR","setCR","CD","setCD","ER","setER","RM","setRM","EM","setEM","resultDamage","calculateDamage","_jsxs","paddingLeft","children","Form","labelCol","span","wrapperCol","layout","maxWidth","Item","label","InputRealNumber","suffix","toFixed","DamageSource","baseAttack","attackPercentage","flatAttack","damageBonus","critRate","critDamage","enemyResistance","reactionMultiplier","elementalMastery","resistanceMultiplier"],"sourceRoot":""}